/*
 * TennisPostgresWebApiCSharp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CoreApi.Client.Sdk.Client;
using CoreApi.Client.Sdk.Model;

namespace CoreApi.Client.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRankingsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ranking&gt;</returns>
        List<Ranking> ApiRankingsGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ranking&gt;</returns>
        ApiResponse<List<Ranking>> ApiRankingsGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Ranking</returns>
        Ranking ApiRankingsIdDelete(long id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Ranking</returns>
        ApiResponse<Ranking> ApiRankingsIdDeleteWithHttpInfo(long id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Ranking</returns>
        Ranking ApiRankingsIdGet(long id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Ranking</returns>
        ApiResponse<Ranking> ApiRankingsIdGetWithHttpInfo(long id);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <returns></returns>
        void ApiRankingsIdPut(long id, Ranking ranking = default(Ranking));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiRankingsIdPutWithHttpInfo(long id, Ranking ranking = default(Ranking));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <returns>List&lt;RankingsList&gt;</returns>
        List<RankingsList> ApiRankingsListYearGenderGet(int year, string gender);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <returns>ApiResponse of List&lt;RankingsList&gt;</returns>
        ApiResponse<List<RankingsList>> ApiRankingsListYearGenderGetWithHttpInfo(int year, string gender);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <returns>Ranking</returns>
        Ranking ApiRankingsPost(Ranking ranking = default(Ranking));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <returns>ApiResponse of Ranking</returns>
        ApiResponse<Ranking> ApiRankingsPostWithHttpInfo(Ranking ranking = default(Ranking));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;int&gt;</returns>
        List<int> ApiYearsGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        ApiResponse<List<int>> ApiYearsGetWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRankingsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Ranking&gt;</returns>
        System.Threading.Tasks.Task<List<Ranking>> ApiRankingsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Ranking&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Ranking>>> ApiRankingsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ranking</returns>
        System.Threading.Tasks.Task<Ranking> ApiRankingsIdDeleteAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ranking)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ranking>> ApiRankingsIdDeleteWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ranking</returns>
        System.Threading.Tasks.Task<Ranking> ApiRankingsIdGetAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ranking)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ranking>> ApiRankingsIdGetWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiRankingsIdPutAsync(long id, Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiRankingsIdPutWithHttpInfoAsync(long id, Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RankingsList&gt;</returns>
        System.Threading.Tasks.Task<List<RankingsList>> ApiRankingsListYearGenderGetAsync(int year, string gender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RankingsList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RankingsList>>> ApiRankingsListYearGenderGetWithHttpInfoAsync(int year, string gender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ranking</returns>
        System.Threading.Tasks.Task<Ranking> ApiRankingsPostAsync(Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ranking)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ranking>> ApiRankingsPostWithHttpInfoAsync(Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        System.Threading.Tasks.Task<List<int>> ApiYearsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<int>>> ApiYearsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRankingsApi : IRankingsApiSync, IRankingsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RankingsApi : IRankingsApi
    {
        private CoreApi.Client.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RankingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RankingsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RankingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RankingsApi(String basePath)
        {
            this.Configuration = CoreApi.Client.Sdk.Client.Configuration.MergeConfigurations(
                CoreApi.Client.Sdk.Client.GlobalConfiguration.Instance,
                new CoreApi.Client.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CoreApi.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoreApi.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CoreApi.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RankingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RankingsApi(CoreApi.Client.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CoreApi.Client.Sdk.Client.Configuration.MergeConfigurations(
                CoreApi.Client.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CoreApi.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CoreApi.Client.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CoreApi.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RankingsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RankingsApi(CoreApi.Client.Sdk.Client.ISynchronousClient client, CoreApi.Client.Sdk.Client.IAsynchronousClient asyncClient, CoreApi.Client.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CoreApi.Client.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CoreApi.Client.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CoreApi.Client.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CoreApi.Client.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CoreApi.Client.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Ranking&gt;</returns>
        public List<Ranking> ApiRankingsGet()
        {
            CoreApi.Client.Sdk.Client.ApiResponse<List<Ranking>> localVarResponse = ApiRankingsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Ranking&gt;</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<List<Ranking>> ApiRankingsGetWithHttpInfo()
        {
            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Ranking>>("/api/Rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Ranking&gt;</returns>
        public async System.Threading.Tasks.Task<List<Ranking>> ApiRankingsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<List<Ranking>> localVarResponse = await ApiRankingsGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Ranking&gt;)</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<List<Ranking>>> ApiRankingsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Ranking>>("/api/Rankings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Ranking</returns>
        public Ranking ApiRankingsIdDelete(long id)
        {
            CoreApi.Client.Sdk.Client.ApiResponse<Ranking> localVarResponse = ApiRankingsIdDeleteWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Ranking</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<Ranking> ApiRankingsIdDeleteWithHttpInfo(long id)
        {
            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Ranking>("/api/Rankings/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ranking</returns>
        public async System.Threading.Tasks.Task<Ranking> ApiRankingsIdDeleteAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<Ranking> localVarResponse = await ApiRankingsIdDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ranking)</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<Ranking>> ApiRankingsIdDeleteWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Ranking>("/api/Rankings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Ranking</returns>
        public Ranking ApiRankingsIdGet(long id)
        {
            CoreApi.Client.Sdk.Client.ApiResponse<Ranking> localVarResponse = ApiRankingsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Ranking</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<Ranking> ApiRankingsIdGetWithHttpInfo(long id)
        {
            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<Ranking>("/api/Rankings/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ranking</returns>
        public async System.Threading.Tasks.Task<Ranking> ApiRankingsIdGetAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<Ranking> localVarResponse = await ApiRankingsIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ranking)</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<Ranking>> ApiRankingsIdGetWithHttpInfoAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Ranking>("/api/Rankings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <returns></returns>
        public void ApiRankingsIdPut(long id, Ranking ranking = default(Ranking))
        {
            ApiRankingsIdPutWithHttpInfo(id, ranking);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<Object> ApiRankingsIdPutWithHttpInfo(long id, Ranking ranking = default(Ranking))
        {
            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ranking;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/Rankings/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiRankingsIdPutAsync(long id, Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiRankingsIdPutWithHttpInfoAsync(id, ranking, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<Object>> ApiRankingsIdPutWithHttpInfoAsync(long id, Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = ranking;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/Rankings/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsIdPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <returns>List&lt;RankingsList&gt;</returns>
        public List<RankingsList> ApiRankingsListYearGenderGet(int year, string gender)
        {
            CoreApi.Client.Sdk.Client.ApiResponse<List<RankingsList>> localVarResponse = ApiRankingsListYearGenderGetWithHttpInfo(year, gender);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <returns>ApiResponse of List&lt;RankingsList&gt;</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<List<RankingsList>> ApiRankingsListYearGenderGetWithHttpInfo(int year, string gender)
        {
            // verify the required parameter 'gender' is set
            if (gender == null)
                throw new CoreApi.Client.Sdk.Client.ApiException(400, "Missing required parameter 'gender' when calling RankingsApi->ApiRankingsListYearGenderGet");

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("gender", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(gender)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<RankingsList>>("/api/rankingsList/{year}/{gender}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsListYearGenderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;RankingsList&gt;</returns>
        public async System.Threading.Tasks.Task<List<RankingsList>> ApiRankingsListYearGenderGetAsync(int year, string gender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<List<RankingsList>> localVarResponse = await ApiRankingsListYearGenderGetWithHttpInfoAsync(year, gender, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="year"></param>
        /// <param name="gender"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;RankingsList&gt;)</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<List<RankingsList>>> ApiRankingsListYearGenderGetWithHttpInfoAsync(int year, string gender, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'gender' is set
            if (gender == null)
                throw new CoreApi.Client.Sdk.Client.ApiException(400, "Missing required parameter 'gender' when calling RankingsApi->ApiRankingsListYearGenderGet");


            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("year", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(year)); // path parameter
            localVarRequestOptions.PathParameters.Add("gender", CoreApi.Client.Sdk.Client.ClientUtils.ParameterToString(gender)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<RankingsList>>("/api/rankingsList/{year}/{gender}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsListYearGenderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <returns>Ranking</returns>
        public Ranking ApiRankingsPost(Ranking ranking = default(Ranking))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<Ranking> localVarResponse = ApiRankingsPostWithHttpInfo(ranking);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <returns>ApiResponse of Ranking</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<Ranking> ApiRankingsPostWithHttpInfo(Ranking ranking = default(Ranking))
        {
            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ranking;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Ranking>("/api/Rankings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Ranking</returns>
        public async System.Threading.Tasks.Task<Ranking> ApiRankingsPostAsync(Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<Ranking> localVarResponse = await ApiRankingsPostWithHttpInfoAsync(ranking, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ranking"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Ranking)</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<Ranking>> ApiRankingsPostWithHttpInfoAsync(Ranking ranking = default(Ranking), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = ranking;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Ranking>("/api/Rankings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRankingsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;int&gt;</returns>
        public List<int> ApiYearsGet()
        {
            CoreApi.Client.Sdk.Client.ApiResponse<List<int>> localVarResponse = ApiYearsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;int&gt;</returns>
        public CoreApi.Client.Sdk.Client.ApiResponse<List<int>> ApiYearsGetWithHttpInfo()
        {
            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<int>>("/api/years", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiYearsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;int&gt;</returns>
        public async System.Threading.Tasks.Task<List<int>> ApiYearsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            CoreApi.Client.Sdk.Client.ApiResponse<List<int>> localVarResponse = await ApiYearsGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="CoreApi.Client.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;int&gt;)</returns>
        public async System.Threading.Tasks.Task<CoreApi.Client.Sdk.Client.ApiResponse<List<int>>> ApiYearsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            CoreApi.Client.Sdk.Client.RequestOptions localVarRequestOptions = new CoreApi.Client.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CoreApi.Client.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<int>>("/api/years", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiYearsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
