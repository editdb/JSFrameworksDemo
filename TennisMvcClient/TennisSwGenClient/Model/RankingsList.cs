/*
 * TennisPostgresWebApiCSharp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoreApi.Client.Sdk.Client.OpenAPIDateConverter;

namespace CoreApi.Client.Sdk.Model
{
    /// <summary>
    /// RankingsList
    /// </summary>
    [DataContract(Name = "RankingsList")]
    public partial class RankingsList : IEquatable<RankingsList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RankingsList" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="playerId">playerId.</param>
        /// <param name="playerName">playerName.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="countryCode">countryCode.</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="countryImageLink">countryImageLink.</param>
        /// <param name="movement">movement.</param>
        /// <param name="rank">rank.</param>
        /// <param name="points">points.</param>
        /// <param name="prizeMoney">prizeMoney.</param>
        /// <param name="singlesTitles">singlesTitles.</param>
        /// <param name="doublesTitles">doublesTitles.</param>
        /// <param name="singlesWin">singlesWin.</param>
        /// <param name="singlesLoss">singlesLoss.</param>
        /// <param name="year">year.</param>
        /// <param name="gender">gender.</param>
        public RankingsList(long id = default(long), long? playerId = default(long?), string playerName = default(string), long countryId = default(long), string countryCode = default(string), string countryName = default(string), string countryImageLink = default(string), int? movement = default(int?), int? rank = default(int?), int? points = default(int?), int? prizeMoney = default(int?), int? singlesTitles = default(int?), int? doublesTitles = default(int?), int? singlesWin = default(int?), int? singlesLoss = default(int?), int year = default(int), string gender = default(string))
        {
            this.Id = id;
            this.PlayerId = playerId;
            this.PlayerName = playerName;
            this.CountryId = countryId;
            this.CountryCode = countryCode;
            this.CountryName = countryName;
            this.CountryImageLink = countryImageLink;
            this.Movement = movement;
            this.Rank = rank;
            this.Points = points;
            this.PrizeMoney = prizeMoney;
            this.SinglesTitles = singlesTitles;
            this.DoublesTitles = doublesTitles;
            this.SinglesWin = singlesWin;
            this.SinglesLoss = singlesLoss;
            this.Year = year;
            this.Gender = gender;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name = "PlayerId", EmitDefaultValue = true)]
        public long? PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets PlayerName
        /// </summary>
        [DataMember(Name = "PlayerName", EmitDefaultValue = true)]
        public string PlayerName { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "CountryId", EmitDefaultValue = false)]
        public long CountryId { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "CountryCode", EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name = "CountryName", EmitDefaultValue = true)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets CountryImageLink
        /// </summary>
        [DataMember(Name = "CountryImageLink", EmitDefaultValue = true)]
        public string CountryImageLink { get; set; }

        /// <summary>
        /// Gets or Sets Movement
        /// </summary>
        [DataMember(Name = "Movement", EmitDefaultValue = true)]
        public int? Movement { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name = "Rank", EmitDefaultValue = true)]
        public int? Rank { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "Points", EmitDefaultValue = true)]
        public int? Points { get; set; }

        /// <summary>
        /// Gets or Sets PrizeMoney
        /// </summary>
        [DataMember(Name = "PrizeMoney", EmitDefaultValue = true)]
        public int? PrizeMoney { get; set; }

        /// <summary>
        /// Gets or Sets SinglesTitles
        /// </summary>
        [DataMember(Name = "SinglesTitles", EmitDefaultValue = true)]
        public int? SinglesTitles { get; set; }

        /// <summary>
        /// Gets or Sets DoublesTitles
        /// </summary>
        [DataMember(Name = "DoublesTitles", EmitDefaultValue = true)]
        public int? DoublesTitles { get; set; }

        /// <summary>
        /// Gets or Sets SinglesWin
        /// </summary>
        [DataMember(Name = "SinglesWin", EmitDefaultValue = true)]
        public int? SinglesWin { get; set; }

        /// <summary>
        /// Gets or Sets SinglesLoss
        /// </summary>
        [DataMember(Name = "SinglesLoss", EmitDefaultValue = true)]
        public int? SinglesLoss { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "Year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "Gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RankingsList {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  PlayerName: ").Append(PlayerName).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  CountryImageLink: ").Append(CountryImageLink).Append("\n");
            sb.Append("  Movement: ").Append(Movement).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  PrizeMoney: ").Append(PrizeMoney).Append("\n");
            sb.Append("  SinglesTitles: ").Append(SinglesTitles).Append("\n");
            sb.Append("  DoublesTitles: ").Append(DoublesTitles).Append("\n");
            sb.Append("  SinglesWin: ").Append(SinglesWin).Append("\n");
            sb.Append("  SinglesLoss: ").Append(SinglesLoss).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RankingsList);
        }

        /// <summary>
        /// Returns true if RankingsList instances are equal
        /// </summary>
        /// <param name="input">Instance of RankingsList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RankingsList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.PlayerName == input.PlayerName ||
                    (this.PlayerName != null &&
                    this.PlayerName.Equals(input.PlayerName))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    this.CountryId.Equals(input.CountryId)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.CountryImageLink == input.CountryImageLink ||
                    (this.CountryImageLink != null &&
                    this.CountryImageLink.Equals(input.CountryImageLink))
                ) && 
                (
                    this.Movement == input.Movement ||
                    (this.Movement != null &&
                    this.Movement.Equals(input.Movement))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.PrizeMoney == input.PrizeMoney ||
                    (this.PrizeMoney != null &&
                    this.PrizeMoney.Equals(input.PrizeMoney))
                ) && 
                (
                    this.SinglesTitles == input.SinglesTitles ||
                    (this.SinglesTitles != null &&
                    this.SinglesTitles.Equals(input.SinglesTitles))
                ) && 
                (
                    this.DoublesTitles == input.DoublesTitles ||
                    (this.DoublesTitles != null &&
                    this.DoublesTitles.Equals(input.DoublesTitles))
                ) && 
                (
                    this.SinglesWin == input.SinglesWin ||
                    (this.SinglesWin != null &&
                    this.SinglesWin.Equals(input.SinglesWin))
                ) && 
                (
                    this.SinglesLoss == input.SinglesLoss ||
                    (this.SinglesLoss != null &&
                    this.SinglesLoss.Equals(input.SinglesLoss))
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.PlayerName != null)
                    hashCode = hashCode * 59 + this.PlayerName.GetHashCode();
                hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.CountryImageLink != null)
                    hashCode = hashCode * 59 + this.CountryImageLink.GetHashCode();
                if (this.Movement != null)
                    hashCode = hashCode * 59 + this.Movement.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.PrizeMoney != null)
                    hashCode = hashCode * 59 + this.PrizeMoney.GetHashCode();
                if (this.SinglesTitles != null)
                    hashCode = hashCode * 59 + this.SinglesTitles.GetHashCode();
                if (this.DoublesTitles != null)
                    hashCode = hashCode * 59 + this.DoublesTitles.GetHashCode();
                if (this.SinglesWin != null)
                    hashCode = hashCode * 59 + this.SinglesWin.GetHashCode();
                if (this.SinglesLoss != null)
                    hashCode = hashCode * 59 + this.SinglesLoss.GetHashCode();
                hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
