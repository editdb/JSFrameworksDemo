@using TennisMvcClient.Components

<div id="mainContainer">
    <div class="row">
        <h5 class="col-md-6">
            Player List
        </h5>
    </div>
    <div class="row">
        <div class="col-md-12">
            <table id="tbl" class="stripe ">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Country</th>
                        <th>Gender</th>
                        <th>Home Town</th>
                        <th>Handed</th>
                        <th>Born</th>
                        <th>Action</th>
                    </tr>
                </thead>

            </table>
        </div>
    </div>
</div>

@(await Html.RenderComponentAsync<PlayerEdit>(RenderMode.ServerPrerendered))

<link rel="stylesheet" href="https://cdn.datatables.net/1.10.18/css/jquery.dataTables.min.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" integrity="sha512-SfTiTlX6kk+qitfevl/7LibUOeJWlt9rbyDn92a1DqWOw9vWG2MFoays0sgObmWazO5BQPiFucnnEAjpAB+/Sw==" crossorigin="anonymous" />
<style>
    td {
        padding-top: 4px !important;
        padding-bottom: 4px !important;
    }
</style>
<!-- script src="https://code.jquery.com/jquery-1.7.1.min.js" integrity="sha256-iBcUE/x23aI6syuqF7EeT/+JFBxjPs5zeFJEXxumwb0=" crossorigin="anonymous"></!--script -->
<script src="https://cdn.datatables.net/1.10.18/js/jquery.dataTables.min.js"></script>
<script>

    // n.b. this is legacy "dataTable" rather than the current "DataTable" which has a more complex json response
    var oTable = $('#tbl').dataTable({
        "bServerSide": true,
        "sAjaxSource": "/PlayerList/GetPlayerList",
        "sServerMethod": "POST",
        "aoColumns": [
            { "mData": "Name" },
            { "mData": o => "<img src='" + o.Country.ImageLink + "' alt='" + o.Country.Name + "' title='" + o.Country.Name + "' />", "className": "dt-center" },
            { "mData": "Gender", "className": "dt-center" },
            { "mData": "HomeTown" },
            { "mData": "Handed", "className": "dt-center" },
            { "mData": o => o.Dob == null ? "" : o.Dob.substr(8, 2) + "/" + o.Dob.substr(5, 2) + "/" + o.Dob.substr(0, 4) },
            { "mData": o => "<a href='#' onclick='blazorInterop.loadPlayerData(" + o.Id + ")' class='btn btn-sm btn-info' data-toggle='modal' data-target='#myModal'><i class='fa fa-pencil fa-1'></i></a>", "className": "dt-center" }
        ],
    });
</script>  

<script>
    window.blazorInterop = {
        dotNetReference: null,
        setDotNetReference: function (dotNetReference) {
            console.log("dotNetReference=" + dotNetReference);
            this.dotNetReference = dotNetReference;
        },
        closeAndRefresh: function () {
            console.log("closeAndRefresh");
            $("#myModal").modal('hide');
            
            $.toast({
                title: "Data Update",
                subtitle: "info",
                content: "Successful",
                type: "success",
                delay: 3000
            });
            
            oTable.fnDraw(false);  // false retains page number
        },
        loadPlayerData: function (id) {
            this.dotNetReference.invokeMethodAsync("LoadPlayer", id)
//              .then(result => {
//                  console.log(result);
//              })
                ;
        }
    };

</script>

<style>
    #toast-container {
        position: sticky;
        z-index: 1055;
        top: 0
    }

    #toast-wrapper {
        position: absolute;
        top: 0;
        right: 0;
        margin: 5px
    }

    #toast-container > #toast-wrapper > .toast {
        min-width: 150px
    }

    #toast-container > #toast-wrapper > .toast > .toast-header strong {
        padding-right: 20px
    }
</style>

<script>
    (function (b) {
        b.toast = function (a, h, g, l, k) {
            b("#toast-container").length || (b("body").prepend('<div id="toast-container" aria-live="polite" aria-atomic="true"></div>'), b("#toast-container").append('<div id="toast-wrapper"></div>')); var c = "", d = "", e = "text-muted", f = "", m = "object" === typeof a ? a.title || "" : a || "Notice!"; h = "object" === typeof a ? a.subtitle || "" : h || ""; g = "object" === typeof a ? a.content || "" : g || ""; k = "object" === typeof a ? a.delay || 3E3 : k || 3E3; switch ("object" === typeof a ? a.type || "" : l || "info") {
                case "info": c = "bg-info";
                    f = e = d = "text-white"; break; case "success": c = "bg-success"; f = e = d = "text-white"; break; case "warning": case "warn": c = "bg-warning"; f = e = d = "text-white"; break; case "error": case "danger": c = "bg-danger", f = e = d = "text-white"
            }a = '<div class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-delay="' + k + '">' + ('<div class="toast-header ' + c + " " + d + '">') + ('<strong class="mr-auto">' + m + "</strong>"); a += '<small class="' + e + '">' + h + "</small>"; a += '<button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">';
            a += '<span aria-hidden="true" class="' + f + '">&times;</span>'; a += "</button>"; a += "</div>"; "" !== g && (a += '<div class="toast-body">', a += g, a += "</div>"); a += "</div>"; b("#toast-wrapper").append(a); b("#toast-wrapper .toast:last").toast("show")
        }
    })(jQuery);
    const TYPES = ['info', 'warning', 'success', 'error'];


</script>

<script src="_framework/blazor.server.js"></script>