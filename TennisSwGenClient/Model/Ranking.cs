/*
 * TennisPostgresWebApiCSharp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoreApi.Client.Sdk.Client.OpenAPIDateConverter;

namespace CoreApi.Client.Sdk.Model
{
    /// <summary>
    /// Ranking
    /// </summary>
    [DataContract(Name = "Ranking")]
    public partial class Ranking : IEquatable<Ranking>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ranking" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="playerId">playerId.</param>
        /// <param name="year">year.</param>
        /// <param name="movement">movement.</param>
        /// <param name="rank">rank.</param>
        /// <param name="points">points.</param>
        /// <param name="prizeMoney">prizeMoney.</param>
        /// <param name="singlesTitles">singlesTitles.</param>
        /// <param name="doublesTitles">doublesTitles.</param>
        /// <param name="singlesWin">singlesWin.</param>
        /// <param name="singlesLoss">singlesLoss.</param>
        /// <param name="player">player.</param>
        public Ranking(long id = default(long), long? playerId = default(long?), int? year = default(int?), int? movement = default(int?), int? rank = default(int?), int? points = default(int?), int? prizeMoney = default(int?), int? singlesTitles = default(int?), int? doublesTitles = default(int?), int? singlesWin = default(int?), int? singlesLoss = default(int?), Player player = default(Player))
        {
            this.Id = id;
            this.PlayerId = playerId;
            this.Year = year;
            this.Movement = movement;
            this.Rank = rank;
            this.Points = points;
            this.PrizeMoney = prizeMoney;
            this.SinglesTitles = singlesTitles;
            this.DoublesTitles = doublesTitles;
            this.SinglesWin = singlesWin;
            this.SinglesLoss = singlesLoss;
            this.Player = player;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets PlayerId
        /// </summary>
        [DataMember(Name = "PlayerId", EmitDefaultValue = true)]
        public long? PlayerId { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "Year", EmitDefaultValue = true)]
        public int? Year { get; set; }

        /// <summary>
        /// Gets or Sets Movement
        /// </summary>
        [DataMember(Name = "Movement", EmitDefaultValue = true)]
        public int? Movement { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [DataMember(Name = "Rank", EmitDefaultValue = true)]
        public int? Rank { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "Points", EmitDefaultValue = true)]
        public int? Points { get; set; }

        /// <summary>
        /// Gets or Sets PrizeMoney
        /// </summary>
        [DataMember(Name = "PrizeMoney", EmitDefaultValue = true)]
        public int? PrizeMoney { get; set; }

        /// <summary>
        /// Gets or Sets SinglesTitles
        /// </summary>
        [DataMember(Name = "SinglesTitles", EmitDefaultValue = true)]
        public int? SinglesTitles { get; set; }

        /// <summary>
        /// Gets or Sets DoublesTitles
        /// </summary>
        [DataMember(Name = "DoublesTitles", EmitDefaultValue = true)]
        public int? DoublesTitles { get; set; }

        /// <summary>
        /// Gets or Sets SinglesWin
        /// </summary>
        [DataMember(Name = "SinglesWin", EmitDefaultValue = true)]
        public int? SinglesWin { get; set; }

        /// <summary>
        /// Gets or Sets SinglesLoss
        /// </summary>
        [DataMember(Name = "SinglesLoss", EmitDefaultValue = true)]
        public int? SinglesLoss { get; set; }

        /// <summary>
        /// Gets or Sets Player
        /// </summary>
        [DataMember(Name = "Player", EmitDefaultValue = false)]
        public Player Player { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ranking {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  Movement: ").Append(Movement).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  PrizeMoney: ").Append(PrizeMoney).Append("\n");
            sb.Append("  SinglesTitles: ").Append(SinglesTitles).Append("\n");
            sb.Append("  DoublesTitles: ").Append(DoublesTitles).Append("\n");
            sb.Append("  SinglesWin: ").Append(SinglesWin).Append("\n");
            sb.Append("  SinglesLoss: ").Append(SinglesLoss).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ranking);
        }

        /// <summary>
        /// Returns true if Ranking instances are equal
        /// </summary>
        /// <param name="input">Instance of Ranking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ranking input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.Year == input.Year ||
                    (this.Year != null &&
                    this.Year.Equals(input.Year))
                ) && 
                (
                    this.Movement == input.Movement ||
                    (this.Movement != null &&
                    this.Movement.Equals(input.Movement))
                ) && 
                (
                    this.Rank == input.Rank ||
                    (this.Rank != null &&
                    this.Rank.Equals(input.Rank))
                ) && 
                (
                    this.Points == input.Points ||
                    (this.Points != null &&
                    this.Points.Equals(input.Points))
                ) && 
                (
                    this.PrizeMoney == input.PrizeMoney ||
                    (this.PrizeMoney != null &&
                    this.PrizeMoney.Equals(input.PrizeMoney))
                ) && 
                (
                    this.SinglesTitles == input.SinglesTitles ||
                    (this.SinglesTitles != null &&
                    this.SinglesTitles.Equals(input.SinglesTitles))
                ) && 
                (
                    this.DoublesTitles == input.DoublesTitles ||
                    (this.DoublesTitles != null &&
                    this.DoublesTitles.Equals(input.DoublesTitles))
                ) && 
                (
                    this.SinglesWin == input.SinglesWin ||
                    (this.SinglesWin != null &&
                    this.SinglesWin.Equals(input.SinglesWin))
                ) && 
                (
                    this.SinglesLoss == input.SinglesLoss ||
                    (this.SinglesLoss != null &&
                    this.SinglesLoss.Equals(input.SinglesLoss))
                ) && 
                (
                    this.Player == input.Player ||
                    (this.Player != null &&
                    this.Player.Equals(input.Player))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.Year != null)
                    hashCode = hashCode * 59 + this.Year.GetHashCode();
                if (this.Movement != null)
                    hashCode = hashCode * 59 + this.Movement.GetHashCode();
                if (this.Rank != null)
                    hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                if (this.PrizeMoney != null)
                    hashCode = hashCode * 59 + this.PrizeMoney.GetHashCode();
                if (this.SinglesTitles != null)
                    hashCode = hashCode * 59 + this.SinglesTitles.GetHashCode();
                if (this.DoublesTitles != null)
                    hashCode = hashCode * 59 + this.DoublesTitles.GetHashCode();
                if (this.SinglesWin != null)
                    hashCode = hashCode * 59 + this.SinglesWin.GetHashCode();
                if (this.SinglesLoss != null)
                    hashCode = hashCode * 59 + this.SinglesLoss.GetHashCode();
                if (this.Player != null)
                    hashCode = hashCode * 59 + this.Player.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
