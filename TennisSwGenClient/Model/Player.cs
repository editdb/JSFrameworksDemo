/*
 * TennisPostgresWebApiCSharp
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CoreApi.Client.Sdk.Client.OpenAPIDateConverter;

namespace CoreApi.Client.Sdk.Model
{
    /// <summary>
    /// Player
    /// </summary>
    [DataContract(Name = "Player")]
    public partial class Player : IEquatable<Player>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="countryId">countryId.</param>
        /// <param name="handed">handed.</param>
        /// <param name="dob">dob.</param>
        /// <param name="homeTown">homeTown.</param>
        /// <param name="heightFeet">heightFeet.</param>
        /// <param name="heightInches">heightInches.</param>
        /// <param name="weight">weight.</param>
        /// <param name="photo">photo.</param>
        /// <param name="gender">gender.</param>
        /// <param name="turnedPro">turnedPro.</param>
        /// <param name="country">country.</param>
        public Player(long id = default(long), string name = default(string), long countryId = default(long), string handed = default(string), DateTime? dob = default(DateTime?), string homeTown = default(string), int? heightFeet = default(int?), int? heightInches = default(int?), int? weight = default(int?), byte[] photo = default(byte[]), string gender = default(string), int? turnedPro = default(int?), Country country = default(Country))
        {
            this.Id = id;
            this.Name = name;
            this.CountryId = countryId;
            this.Handed = handed;
            this.Dob = dob;
            this.HomeTown = homeTown;
            this.HeightFeet = heightFeet;
            this.HeightInches = heightInches;
            this.Weight = weight;
            this.Photo = photo;
            this.Gender = gender;
            this.TurnedPro = turnedPro;
            this.Country = country;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "Id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "Name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name = "CountryId", EmitDefaultValue = false)]
        public long CountryId { get; set; }

        /// <summary>
        /// Gets or Sets Handed
        /// </summary>
        [DataMember(Name = "Handed", EmitDefaultValue = true)]
        public string Handed { get; set; }

        /// <summary>
        /// Gets or Sets Dob
        /// </summary>
        [DataMember(Name = "Dob", EmitDefaultValue = true)]
        public DateTime? Dob { get; set; }

        /// <summary>
        /// Gets or Sets HomeTown
        /// </summary>
        [DataMember(Name = "HomeTown", EmitDefaultValue = true)]
        public string HomeTown { get; set; }

        /// <summary>
        /// Gets or Sets HeightFeet
        /// </summary>
        [DataMember(Name = "HeightFeet", EmitDefaultValue = true)]
        public int? HeightFeet { get; set; }

        /// <summary>
        /// Gets or Sets HeightInches
        /// </summary>
        [DataMember(Name = "HeightInches", EmitDefaultValue = true)]
        public int? HeightInches { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "Weight", EmitDefaultValue = true)]
        public int? Weight { get; set; }

        /// <summary>
        /// Gets or Sets Photo
        /// </summary>
        [DataMember(Name = "Photo", EmitDefaultValue = true)]
        public byte[] Photo { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "Gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets TurnedPro
        /// </summary>
        [DataMember(Name = "TurnedPro", EmitDefaultValue = true)]
        public int? TurnedPro { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "Country", EmitDefaultValue = false)]
        public Country Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Player {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Handed: ").Append(Handed).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  HomeTown: ").Append(HomeTown).Append("\n");
            sb.Append("  HeightFeet: ").Append(HeightFeet).Append("\n");
            sb.Append("  HeightInches: ").Append(HeightInches).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Photo: ").Append(Photo).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  TurnedPro: ").Append(TurnedPro).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Player);
        }

        /// <summary>
        /// Returns true if Player instances are equal
        /// </summary>
        /// <param name="input">Instance of Player to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Player input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    this.CountryId.Equals(input.CountryId)
                ) && 
                (
                    this.Handed == input.Handed ||
                    (this.Handed != null &&
                    this.Handed.Equals(input.Handed))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.HomeTown == input.HomeTown ||
                    (this.HomeTown != null &&
                    this.HomeTown.Equals(input.HomeTown))
                ) && 
                (
                    this.HeightFeet == input.HeightFeet ||
                    (this.HeightFeet != null &&
                    this.HeightFeet.Equals(input.HeightFeet))
                ) && 
                (
                    this.HeightInches == input.HeightInches ||
                    (this.HeightInches != null &&
                    this.HeightInches.Equals(input.HeightInches))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Photo == input.Photo ||
                    (this.Photo != null &&
                    this.Photo.Equals(input.Photo))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.TurnedPro == input.TurnedPro ||
                    (this.TurnedPro != null &&
                    this.TurnedPro.Equals(input.TurnedPro))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.Handed != null)
                    hashCode = hashCode * 59 + this.Handed.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.HomeTown != null)
                    hashCode = hashCode * 59 + this.HomeTown.GetHashCode();
                if (this.HeightFeet != null)
                    hashCode = hashCode * 59 + this.HeightFeet.GetHashCode();
                if (this.HeightInches != null)
                    hashCode = hashCode * 59 + this.HeightInches.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Photo != null)
                    hashCode = hashCode * 59 + this.Photo.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.TurnedPro != null)
                    hashCode = hashCode * 59 + this.TurnedPro.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
