// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TennisAngular10.Models;

namespace TennisAngular10.Migrations
{
    [DbContext(typeof(TennisDBContext))]
    partial class TennisDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TennisAngular10.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("character(3)")
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<string>("ImageLink")
                        .HasColumnName("image_link")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("country","tennis2");
                });

            modelBuilder.Entity("TennisAngular10.Models.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<char>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("character(1)");

                    b.Property<char?>("Handed")
                        .HasColumnName("handed")
                        .HasColumnType("character(1)");

                    b.Property<int?>("HeightFeet")
                        .HasColumnName("height_feet")
                        .HasColumnType("integer");

                    b.Property<int?>("HeightInches")
                        .HasColumnName("height_inches")
                        .HasColumnType("integer");

                    b.Property<string>("HomeTown")
                        .HasColumnName("home_town")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<byte[]>("Photo")
                        .HasColumnName("photo")
                        .HasColumnType("bytea");

                    b.Property<int?>("TurnedPro")
                        .HasColumnName("turned_pro")
                        .HasColumnType("integer");

                    b.Property<int?>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("player","tennis2");
                });

            modelBuilder.Entity("TennisAngular10.Models.Ranking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DoublesTitles")
                        .HasColumnName("doubles_titles")
                        .HasColumnType("integer");

                    b.Property<int?>("Movement")
                        .HasColumnName("movement")
                        .HasColumnType("integer");

                    b.Property<long?>("PlayerId")
                        .HasColumnName("player_id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Points")
                        .HasColumnName("points")
                        .HasColumnType("integer");

                    b.Property<int?>("PrizeMoney")
                        .HasColumnName("prize_money")
                        .HasColumnType("integer");

                    b.Property<int?>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("integer");

                    b.Property<int?>("SinglesLoss")
                        .HasColumnName("singles_loss")
                        .HasColumnType("integer");

                    b.Property<int?>("SinglesTitles")
                        .HasColumnName("singles_titles")
                        .HasColumnType("integer");

                    b.Property<int?>("SinglesWin")
                        .HasColumnName("singles_win")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnName("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("ranking","tennis2");
                });

            modelBuilder.Entity("TennisAngular10.Models.Player", b =>
                {
                    b.HasOne("TennisAngular10.Models.Country", "Country")
                        .WithMany("Player")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("player_country_id_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("TennisAngular10.Models.Ranking", b =>
                {
                    b.HasOne("TennisAngular10.Models.Player", "Player")
                        .WithMany("Ranking")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("ranking_player_id_fkey");
                });
#pragma warning restore 612, 618
        }
    }
}
